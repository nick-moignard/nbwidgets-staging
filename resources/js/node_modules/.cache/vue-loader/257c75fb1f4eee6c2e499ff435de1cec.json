{"remainingRequest":"C:\\Users\\Rvc_2\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Desarrollo\\nb-directory\\resources\\js\\DemoPages\\Dashboards\\Analytics.vue?vue&type=template&id=2d8e329c&","dependencies":[{"path":"C:\\Desarrollo\\nb-directory\\resources\\js\\DemoPages\\Dashboards\\Analytics.vue","mtime":1555346338315},{"path":"C:\\Users\\Rvc_2\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Rvc_2\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Rvc_2\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Rvc_2\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}